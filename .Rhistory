# Assuming the ESS10FR dataset is already loaded
# Extract the numeric decile from the 'hinctnta' variable
ESS10FR$hinctnta_numeric <- as.numeric(sub(" .*", "", ESS10FR$hinctnta))
# Recode 'hinctnta_numeric' into broader income classes
ESS10FR$hinctnta_recode <- cut(
ESS10FR$hinctnta_numeric,
breaks = c(0, 3.5, 7.5, 10),
labels = c("Low Income", "Middle Income", "High Income"),
include.lowest = TRUE
)
# Check the distribution of the new recoded variable
table(ESS10FR$hinctnta_recode)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Extract the numeric decile from the 'hinctnta' variable
# This assumes the letters indicating deciles (e.g., J, R, C, etc.) are consistent and each letter corresponds to a unique decile.
# Create a named vector that maps these letters to their respective numeric deciles
decile_map <- setNames(1:10, c("J", "R", "C", "M", "F", "S", "K", "P", "D", "H"))
# Use string manipulation to extract the letter and then map it to the numeric decile
ESS10FR$hinctnta_numeric <- sapply(sub(" - .*", "", ESS10FR$hinctnta),
function(x) decile_map[x])
# Recode 'hinctnta_numeric' into broader income classes
ESS10FR$hinctnta_recode <- cut(
ESS10FR$hinctnta_numeric,
breaks = c(0, 3.5, 7.5, 10),
labels = c("Low Income", "Middle Income", "High Income"),
include.lowest = TRUE
)
# Check the distribution of the new recoded variable
table(ESS10FR$hinctnta_recode)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Extract the numeric decile from the 'hinctnta' variable
# This assumes the letters indicating deciles (e.g., J, R, C, etc.) are consistent and each letter corresponds to a unique decile.
# Create a named vector that maps these letters to their respective numeric deciles
decile_map <- setNames(1:10, c("J", "R", "C", "M", "F", "S", "K", "P", "D", "H"))
# Use string manipulation to extract the letter and then map it to the numeric decile
ESS10FR$hinctnta_numeric <- sapply(sub(" - .*", "", ESS10FR$hinctnta),
function(x) decile_map[x])
# Recode 'hinctnta_numeric' into broader income classes
ESS10FR$hinctnta_recode <- cut(
ESS10FR$hinctnta_numeric,
breaks = c(0, 3.5, 7.5, 10),
labels = c("Low Income", "Middle Income", "High Income"),
include.lowest = TRUE
)
# Check the distribution of the new recoded variable
table(ESS10FR$hinctnta_recode)
# Create a box plot
ggplot(ESS10FR, aes(x = hinctnta_recode, y = wkhtot, fill = gndr)) +
geom_boxplot() +
labs(title = "Relationship Between Income Class, Gender, and Hours Worked",
x = "Income Class",
y = "Hours Worked per Week") +
scale_fill_brewer(palette = "Set1", name = "Gender") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Extract the numeric decile from the 'hinctnta' variable
# This assumes the letters indicating deciles (e.g., J, R, C, etc.) are consistent and each letter corresponds to a unique decile.
# Create a named vector that maps these letters to their respective numeric deciles
decile_map <- setNames(1:10, c("J", "R", "C", "M", "F", "S", "K", "P", "D", "H"))
# Use string manipulation to extract the letter and then map it to the numeric decile
ESS10FR$hinctnta_numeric <- sapply(sub(" - .*", "", ESS10FR$hinctnta),
function(x) decile_map[x])
# Recode 'hinctnta_numeric' into broader income classes
ESS10FR$hinctnta_recode <- cut(
ESS10FR$hinctnta_numeric,
breaks = c(0, 3.5, 7.5, 10),
labels = c("Low Income", "Middle Income", "High Income"),
include.lowest = TRUE
)
# Check the distribution of the new recoded variable
table(ESS10FR$hinctnta_recode)
# Create a box plot
ggplot(ESS10FR, aes(x = hinctnta_recode, y = wkhtot, fill = gndr)) +
geom_boxplot() +
labs(title = "Relationship Between Income Class, Gender, and Hours Worked",
x = "Income Class",
y = "Hours Worked per Week") +
scale_fill_brewer(palette = "Set1", name = "Gender") +
theme_minimal()
# Creating a scatter plot with facet wrap
ggplot(ESS10FR, aes(x = hinctnta_recode, y = wkhtot, color = gndr)) +
geom_point(alpha = 0.5) +
facet_wrap(~hinctnta_recode) +
labs(title = "Relationship Between Income Class, Gender, and Hours Worked",
x = "Income Class",
y = "Hours Worked per Week") +
scale_color_brewer(palette = "Set1", name = "Gender") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Assuming the dataset is already loaded
# Recode 'jbprtfp' into descriptive categories, excluding those who don't have a partner/family
ESS10FR$jbprtfp_recode <- factor(ESS10FR$jbprtfp, levels = c(1, 2, 3, 4, 5),
labels = c("Never", "Hardly ever", "Sometimes", "Often", "Always"))
# Recoding 'wkhtot' into four categories
breakpoints <- c(0, 20, 40, 60, Inf)
labels <- c("Part-time", "Full-time", "Extended Full-time", "Excessive")
ESS10FR$wkhtot_recode <- cut(ESS10FR$wkhtot, breaks = breakpoints, labels = labels, include.lowest = TRUE, right = FALSE)
# Filter out responses in 'jbprtfp' that are "Don't have partner/family"
filtered_data <- ESS10FR %>%
filter(jbprtfp != "Don't have partner/family")
# Cross-tabulation of 'wkhtot_recode' and 'jbprtfp'
cross_tab_1B <- table(filtered_data$wkhtot_recode, filtered_data$jbprtfp)
print(cross_tab_1B)
# Perform Fisher's Exact Test with Monte Carlo simulation
fisher_test_monte_carlo <- fisher.test(cross_tab_1B, simulate.p.value = TRUE, B = 20000)
# Print the result of Fisher's Exact Test with Monte Carlo simulation
print(fisher_test_monte_carlo)
first_50_wkhtotp <- head(ESS10FR$wkhtotp, 50)
print(first_50_wkhtotp)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Extract the numeric decile from the 'hinctnta' variable
# This assumes the letters indicating deciles (e.g., J, R, C, etc.) are consistent and each letter corresponds to a unique decile.
# Create a named vector that maps these letters to their respective numeric deciles
decile_map <- setNames(1:10, c("J", "R", "C", "M", "F", "S", "K", "P", "D", "H"))
# Use string manipulation to extract the letter and then map it to the numeric decile
ESS10FR$hinctnta_numeric <- sapply(sub(" - .*", "", ESS10FR$hinctnta),
function(x) decile_map[x])
# Recode 'hinctnta_numeric' into broader income classes
ESS10FR$hinctnta_recode <- cut(
ESS10FR$hinctnta_numeric,
breaks = c(0, 3.5, 7.5, 10),
labels = c("Low Income", "Middle Income", "High Income"),
include.lowest = TRUE
)
# Check the distribution of the new recoded variable
table(ESS10FR$hinctnta_recode)
# Create a box plot
ggplot(ESS10FR, aes(x = hinctnta_recode, y = wkhtot, fill = gndr)) +
geom_boxplot() +
labs(title = "Relation entre la classe de revenu, le sexe et les heures travaillées",
x = "Income Class",
y = "Hours Worked per Week") +
scale_fill_brewer(palette = "Set1", name = "Gender") +
theme_minimal()
# Creating a scatter plot with facet wrap
ggplot(ESS10FR, aes(x = hinctnta_recode, y = wkhtot, color = gndr)) +
geom_point(alpha = 0.5) +
facet_wrap(~hinctnta_recode) +
labs(title = "Relation entre la classe de revenu, le sexe et les heures travaillées",
x = "Income Class",
y = "Hours Worked per Week") +
scale_color_brewer(palette = "Set1", name = "Gender") +
theme_minimal()
library(dplyr)
library(ggplot2)
load("ESS10FR.rdata")
gender_column <- "gndr"
hours_worked_column <- "wkhtot"
summary_stats <- ESS10FR %>%
filter(!is.na(!!sym(hours_worked_column)) & !is.na(!!sym(gender_column))) %>%
group_by(!!sym(gender_column)) %>%
summarise(
Average = mean(!!sym(hours_worked_column), na.rm = TRUE),
Median = median(!!sym(hours_worked_column), na.rm = TRUE),
SD = sd(!!sym(hours_worked_column), na.rm = TRUE),
IQR = IQR(!!sym(hours_worked_column), na.rm = TRUE)
)
print(summary_stats)
# Boxplot
ggplot(ESS10FR, aes(x = !!sym(gender_column), y = !!sym(hours_worked_column), fill = !!sym(gender_column))) +
geom_boxplot() +
labs(title = "Répartition des heures de travail rémunérées par sexe",
x = "Sexe",
y = "Heures de travail rémunérées par semaine") +
scale_fill_discrete(name = "Sexe") +
theme(legend.position = "bottom")
#density plot
ggplot(ESS10FR, aes(x = wkhtot, fill = gndr)) +
geom_density(alpha = 0.7) +
labs(title = "Répartition des heures de travail rémunérées par sexe",
x = "Heures de travail rémunérées par semaine",
y = "Densité") +
scale_fill_discrete(name = "Sexe") +
theme_minimal() +
theme(legend.position = "bottom")
# Assuming 'Male' and 'Female' are the two levels you want to compare
filtered_data <- ESS10FR %>%
filter(gndr %in% c("Male", "Female"))
# Now run the t-test on the filtered data
t_test_result <- t.test(wkhtot ~ gndr, data = filtered_data, na.action = na.exclude)
print(t_test_result)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Assuming the dataset is already loaded
# Recode 'jbprtfp' into descriptive categories, excluding those who don't have a partner/family
ESS10FR$jbprtfp_recode <- factor(ESS10FR$jbprtfp, levels = c(1, 2, 3, 4, 5),
labels = c("Jamais", "Presque jamais", "Parfois", "Souvent", "Toujours"))
# Recoding 'wkhtot' into four categories
breakpoints <- c(0, 20, 40, 60, Inf)
labels <- c("Temps partiel", "Temps plein", "Temps plein prolongé", "Excessif")
ESS10FR$wkhtot_recoder <- cut(ESS10FR$wkhtot, breaks = breakpoints, labels = labels, include.lowest = TRUE, right = FALSE)
# Filter out responses in 'jbprtfp' that are "Don't have partner/family"
filtered_data <- ESS10FR %>%
filter(jbprtfp != "Je n'ai pas de partenaire/de famille")
# Cross-tabulation of 'wkhtot_recode' and 'jbprtfp'
cross_tab_1B <- table(filtered_data$wkhtot_recode, filtered_data$jbprtfp)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Recode 'jbprtfp' into three categories: 'Low Conflict', 'Moderate Conflict', and 'High Conflict'
ESS10FR$jbprtfp_recode_3cat <- factor(
case_when(
ESS10FR$jbprtfp %in% c("Jamais", "Presque jamais") ~ "faible conflit",
ESS10FR$jbprtfp == "Parfois" ~ "conflit modéré",
ESS10FR$jbprtfp %in% c("Souvent", "Toujours") ~ "conflit élevé",
TRUE ~ NA_character_  # Exclude responses such as 'Don't have partner/family' or missing data
)
)
# Filter out the NA values in the new recoded variable
filtered_data_2A <- ESS10FR %>% filter(!is.na(jbprtfp_recode_3cat))
# Check the distribution of the new recoded variable
table(filtered_data_2A$jbprtfp_recode_3cat)
# Create a cross-tabulation of work-life balance categories by gender
cross_tab_2B <- table(filtered_data_2A$gndr, filtered_data_2A$jbprtfp_recode_3cat)
# Print the cross-tabulation
print(cross_tab_2B)
# Visualize with a bar plot
ggplot(filtered_data_2A, aes(x = gndr, fill = jbprtfp_recode_3cat)) +
geom_bar(position = "dodge") +
labs(title = "Équilibre travail-vie personnelle par sexe",
x = "Sexe",
y = "Compte") +
scale_fill_brewer(palette = "Pastel1", name = "Conflit travail-vie personnelle") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Extract the numeric decile from the 'hinctnta' variable
# This assumes the letters indicating deciles (e.g., J, R, C, etc.) are consistent and each letter corresponds to a unique decile.
# Create a named vector that maps these letters to their respective numeric deciles
decile_map <- setNames(1:10, c("J", "R", "C", "M", "F", "S", "K", "P", "D", "H"))
# Use string manipulation to extract the letter and then map it to the numeric decile
ESS10FR$hinctnta_numeric <- sapply(sub(" - .*", "", ESS10FR$hinctnta),
function(x) decile_map[x])
# Recode 'hinctnta_numeric' into broader income classes
ESS10FR$hinctnta_recode <- cut(
ESS10FR$hinctnta_numeric,
breaks = c(0, 3.5, 7.5, 10),
labels = c("Faible revenu", "Revenu intermédiaire", "Revenu élevé"),
include.lowest = TRUE
)
# Check the distribution of the new recoded variable
table(ESS10FR$hinctnta_recode)
# Create a box plot
ggplot(ESS10FR, aes(x = hinctnta_recode, y = wkhtot, fill = gndr)) +
geom_boxplot() +
labs(title = "Relation entre la classe de revenu, le sexe et les heures travaillées",
x = "Classe de revenu",
y = "Heures travaillées par semaine") +
scale_fill_brewer(palette = "Set1", name = "Sexe") +
theme_minimal()
# Creating a scatter plot with facet wrap
ggplot(ESS10FR, aes(x = hinctnta_recode, y = wkhtot, color = gndr)) +
geom_point(alpha = 0.5) +
facet_wrap(~hinctnta_recode) +
labs(title = "Relation entre la classe de revenu, le sexe et les heures travaillées",
x = "Classe de revenu",
y = "Heures travaillées par semaine") +
scale_color_brewer(palette = "Set1", name = "Sexe") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Assuming the dataset is already loaded
# Recode 'jbprtfp' into descriptive categories, excluding those who don't have a partner/family
ESS10FR$jbprtfp_recode <- factor(ESS10FR$jbprtfp, levels = c(1, 2, 3, 4, 5),
labels = c("Jamais", "Presque jamais", "Parfois", "Souvent", "Toujours"))
# Recoding 'wkhtot' into four categories
breakpoints <- c(0, 20, 40, 60, Inf)
labels <- c("Temps partiel", "Temps plein", "Temps plein prolongé", "Excessif")
ESS10FR$wkhtot_recoder <- cut(ESS10FR$wkhtot, breaks = breakpoints, labels = labels, include.lowest = TRUE, right = FALSE)
# Filter out responses in 'jbprtfp' that are "Don't have partner/family"
filtered_data <- ESS10FR %>%
filter(jbprtfp != "Je n'ai pas de partenaire/de famille")
# Cross-tabulation of 'wkhtot_recode' and 'jbprtfp'
cross_tab_1B <- table(filtered_data$wkhtot_recode, filtered_data$jbprtfp)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Recode 'jbprtfp' into three categories: 'Low Conflict', 'Moderate Conflict', and 'High Conflict'
ESS10FR$jbprtfp_recode_3cat <- factor(
case_when(
ESS10FR$jbprtfp %in% c("Jamais", "Presque jamais") ~ "faible conflit",
ESS10FR$jbprtfp == "Parfois" ~ "conflit modéré",
ESS10FR$jbprtfp %in% c("Souvent", "Toujours") ~ "conflit élevé",
TRUE ~ NA_character_  # Exclude responses such as 'Don't have partner/family' or missing data
)
)
# Filter out the NA values in the new recoded variable
filtered_data_2A <- ESS10FR %>% filter(!is.na(jbprtfp_recode_3cat))
# Check the distribution of the new recoded variable
table(filtered_data_2A$jbprtfp_recode_3cat)
# Create a cross-tabulation of work-life balance categories by gender
cross_tab_2B <- table(filtered_data_2A$gndr, filtered_data_2A$jbprtfp_recode_3cat)
# Print the cross-tabulation
print(cross_tab_2B)
# Visualize with a bar plot
ggplot(filtered_data_2A, aes(x = gndr, fill = jbprtfp_recode_3cat)) +
geom_bar(position = "dodge") +
labs(title = "Équilibre travail-vie personnelle par sexe",
x = "Sexe",
y = "Compte") +
scale_fill_brewer(palette = "Pastel1", name = "Conflit travail-vie personnelle") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Recode 'jbprtfp' into three categories: 'Low Conflict', 'Moderate Conflict', and 'High Conflict'
ESS10FR$jbprtfp_recode_3cat <- factor(
case_when(
ESS10FR$jbprtfp %in% c("Never", "Hardly Ever") ~ "faible conflit",
ESS10FR$jbprtfp == "Sometimes" ~ "conflit modéré",
ESS10FR$jbprtfp %in% c("Often", "Always") ~ "conflit élevé",
TRUE ~ NA_character_  # Exclude responses such as 'Don't have partner/family' or missing data
)
)
# Filter out the NA values in the new recoded variable
filtered_data_2A <- ESS10FR %>% filter(!is.na(jbprtfp_recode_3cat))
# Check the distribution of the new recoded variable
table(filtered_data_2A$jbprtfp_recode_3cat)
# Create a cross-tabulation of work-life balance categories by gender
cross_tab_2B <- table(filtered_data_2A$gndr, filtered_data_2A$jbprtfp_recode_3cat)
# Print the cross-tabulation
print(cross_tab_2B)
# Visualize with a bar plot
ggplot(filtered_data_2A, aes(x = gndr, fill = jbprtfp_recode_3cat)) +
geom_bar(position = "dodge") +
labs(title = "Équilibre travail-vie personnelle par sexe",
x = "Sexe",
y = "Compte") +
scale_fill_brewer(palette = "Pastel1", name = "Conflit travail-vie personnelle") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Assuming the dataset is already loaded
# Recode 'jbprtfp' into descriptive categories, excluding those who don't have a partner/family
ESS10FR$jbprtfp_recode <- factor(ESS10FR$jbprtfp, levels = c(1, 2, 3, 4, 5),
labels = c("Never", "Hardly ever", "Sometimes", "Often", "Always"))
# Recoding 'wkhtot' into four categories
breakpoints <- c(0, 20, 40, 60, Inf)
labels <- c("Temps partiel", "Temps plein", "Temps plein prolongé", "Excessif")
ESS10FR$wkhtot_recoder <- cut(ESS10FR$wkhtot, breaks = breakpoints, labels = labels, include.lowest = TRUE, right = FALSE)
# Filter out responses in 'jbprtfp' that are "Don't have partner/family"
filtered_data <- ESS10FR %>%
filter(jbprtfp != "Je n'ai pas de partenaire/de famille")
# Cross-tabulation of 'wkhtot_recode' and 'jbprtfp'
cross_tab_1B <- table(filtered_data$wkhtot_recode, filtered_data$jbprtfp)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Assuming the dataset is already loaded
# Recode 'jbprtfp' into descriptive categories, excluding those who don't have a partner/family
ESS10FR$jbprtfp_recode <- factor(ESS10FR$jbprtfp, levels = c(1, 2, 3, 4, 5),
labels = c("Never", "Hardly ever", "Sometimes", "Often", "Always"))
# Recoding 'wkhtot' into four categories
breakpoints <- c(0, 20, 40, 60, Inf)
labels <- c("Temps partiel", "Temps plein", "Temps plein prolongé", "Excessif")
ESS10FR$wkhtot_recode <- cut(ESS10FR$wkhtot, breaks = breakpoints, labels = labels, include.lowest = TRUE, right = FALSE)
# Filter out responses in 'jbprtfp' that are "Don't have partner/family"
filtered_data <- ESS10FR %>%
filter(jbprtfp != "Je n'ai pas de partenaire/de famille")
# Cross-tabulation of 'wkhtot_recode' and 'jbprtfp'
cross_tab_1B <- table(filtered_data$wkhtot_recode, filtered_data$jbprtfp)
print(cross_tab_1B)
# Perform Fisher's Exact Test with Monte Carlo simulation
fisher_test_monte_carlo <- fisher.test(cross_tab_1B, simulate.p.value = TRUE, B = 20000)
# Print the result of Fisher's Exact Test with Monte Carlo simulation
print(fisher_test_monte_carlo)
library(dplyr)
library(ggplot2)
load("ESS10FR.rdata")
gender_column <- "gndr"
hours_worked_column <- "wkhtot"
summary_stats <- ESS10FR %>%
filter(!is.na(!!sym(hours_worked_column)) & !is.na(!!sym(gender_column))) %>%
group_by(!!sym(gender_column)) %>%
summarise(
Average = mean(!!sym(hours_worked_column), na.rm = TRUE),
Median = median(!!sym(hours_worked_column), na.rm = TRUE),
SD = sd(!!sym(hours_worked_column), na.rm = TRUE),
IQR = IQR(!!sym(hours_worked_column), na.rm = TRUE)
)
print(summary_stats)
# Boxplot
ggplot(ESS10FR, aes(x = !!sym(gender_column), y = !!sym(hours_worked_column), fill = !!sym(gender_column))) +
geom_boxplot() +
labs(title = "Répartition des heures de travail rémunérées par sexe",
x = "Sexe",
y = "Heures de travail rémunérées par semaine") +
scale_fill_discrete(name = "Sexe") +
theme(legend.position = "bottom")
#density plot
ggplot(ESS10FR, aes(x = wkhtot, fill = gndr)) +
geom_density(alpha = 0.7) +
labs(title = "Répartition des heures de travail rémunérées par sexe",
x = "Heures de travail rémunérées par semaine",
y = "Densité") +
scale_fill_discrete(name = "Sexe") +
theme_minimal() +
theme(legend.position = "bottom")
# Assuming 'Male' and 'Female' are the two levels you want to compare
filtered_data <- ESS10FR %>%
filter(gndr %in% c("Male", "Female"))
# Now run the t-test on the filtered data
t_test_result <- t.test(wkhtot ~ gndr, data = filtered_data, na.action = na.exclude)
print(t_test_result)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Extract the numeric decile from the 'hinctnta' variable
# This assumes the letters indicating deciles (e.g., J, R, C, etc.) are consistent and each letter corresponds to a unique decile.
# Create a named vector that maps these letters to their respective numeric deciles
decile_map <- setNames(1:10, c("J", "R", "C", "M", "F", "S", "K", "P", "D", "H"))
# Use string manipulation to extract the letter and then map it to the numeric decile
ESS10FR$hinctnta_numeric <- sapply(sub(" - .*", "", ESS10FR$hinctnta),
function(x) decile_map[x])
# Recode 'hinctnta_numeric' into broader income classes
ESS10FR$hinctnta_recode <- cut(
ESS10FR$hinctnta_numeric,
breaks = c(0, 3.5, 7.5, 10),
labels = c("Faible revenu", "Revenu intermédiaire", "Revenu élevé"),
include.lowest = TRUE
)
# Check the distribution of the new recoded variable
table(ESS10FR$hinctnta_recode)
# Create a box plot
ggplot(ESS10FR, aes(x = hinctnta_recode, y = wkhtot, fill = gndr)) +
geom_boxplot() +
labs(title = "Relation entre la classe de revenu, le sexe et les heures travaillées",
x = "Classe de revenu",
y = "Heures travaillées par semaine") +
scale_fill_brewer(palette = "Set1", name = "Sexe") +
theme_minimal()
# Creating a scatter plot with facet wrap
ggplot(ESS10FR, aes(x = hinctnta_recode, y = wkhtot, color = gndr)) +
geom_point(alpha = 0.5) +
facet_wrap(~hinctnta_recode) +
labs(title = "Relation entre la classe de revenu, le sexe et les heures travaillées",
x = "Classe de revenu",
y = "Heures travaillées par semaine") +
scale_color_brewer(palette = "Set1", name = "Sexe") +
theme_minimal()
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the dataset
load("ESS10FR.rdata")
# Recode 'jbprtfp' into three categories: 'Low Conflict', 'Moderate Conflict', and 'High Conflict'
ESS10FR$jbprtfp_recode_3cat <- factor(
case_when(
ESS10FR$jbprtfp %in% c("Never", "Hardly Ever") ~ "faible conflit",
ESS10FR$jbprtfp == "Sometimes" ~ "conflit modéré",
ESS10FR$jbprtfp %in% c("Often", "Always") ~ "conflit élevé",
TRUE ~ NA_character_  # Exclude responses such as 'Don't have partner/family' or missing data
)
)
# Filter out the NA values in the new recoded variable
filtered_data_2A <- ESS10FR %>% filter(!is.na(jbprtfp_recode_3cat))
# Check the distribution of the new recoded variable
table(filtered_data_2A$jbprtfp_recode_3cat)
# Create a cross-tabulation of work-life balance categories by gender
cross_tab_2B <- table(filtered_data_2A$gndr, filtered_data_2A$jbprtfp_recode_3cat)
# Print the cross-tabulation
print(cross_tab_2B)
# Visualize with a bar plot
ggplot(filtered_data_2A, aes(x = gndr, fill = jbprtfp_recode_3cat)) +
geom_bar(position = "dodge") +
labs(title = "Équilibre travail-vie personnelle par sexe",
x = "Sexe",
y = "Compte") +
scale_fill_brewer(palette = "Pastel1", name = "Conflit travail-vie personnelle") +
theme_minimal()
